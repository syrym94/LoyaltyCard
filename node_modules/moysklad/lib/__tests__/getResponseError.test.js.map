{"version":3,"sources":["../../src/__tests__/getResponseError.test.js"],"names":["test","require","getResponseError","createFooError","message","code","meta","type","error","moreInfo","parameter","column","line","t","equal","resp","errors","length","notOk","foo"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,mBAAmBD,QAAQ,qBAAR,CAAzB;;AAEA,MAAME,iBAAiB,CAACC,OAAD,EAAUC,IAAV,MAAoB;AACzCC,QAAM;AACJC,UAAM;AADF,GADmC;AAIzCF,YAJyC;AAKzCG,SAAOJ,OALkC;AAMzCK,YAAU,sBAN+B;AAOzCC,aAAW,KAP8B;AAQzCC,UAAQ,EARiC;AASzCC,QAAM;AATmC,CAApB,CAAvB;;AAYAZ,KAAK,mCAAL;AAAA,+BAA0C,WAAMa,CAAN,EAAW;AACnDA,MAAEC,KAAF,CAAQZ,kBAAR,EAA4B,IAA5B,EAAkC,mBAAlC;AACAW,MAAEC,KAAF,CAAQZ,iBAAiB,EAAjB,CAAR,EAA8B,IAA9B,EAAoC,mBAApC;AACAW,MAAEC,KAAF,CAAQZ,iBAAiB,CAAC,EAAD,CAAjB,CAAR,EAAgC,IAAhC,EAAsC,mBAAtC;AACD,GAJD;;AAAA;AAAA;AAAA;AAAA;;AAMAF,KAAK,yCAAL;AAAA,gCAAgD,WAAMa,CAAN,EAAW;AACzD,QAAIE,OAAO;AACTC,cAAQ,CACNb,eAAe,UAAf,EAA2B,IAA3B,CADM,EAENA,eAAe,UAAf,EAA2B,IAA3B,CAFM;AADC,KAAX;;AAOA,QAAIK,QAAQN,iBAAiBa,IAAjB,CAAZ;;AAEAF,MAAEC,KAAF,CAAQN,MAAMJ,OAAd,EAAuB,UAAvB,EAAmC,0BAAnC;AACAS,MAAEC,KAAF,CAAQN,MAAMH,IAAd,EAAoB,IAApB,EAA0B,uBAA1B;AACAQ,MAAEC,KAAF,CAAQN,MAAMC,QAAd,EAAwB,sBAAxB,EAAgD,2BAAhD;AACAI,MAAEC,KAAF,CAAQN,MAAMQ,MAAN,CAAaC,MAArB,EAA6B,CAA7B,EAAgC,yBAAhC;AACD,GAdD;;AAAA;AAAA;AAAA;AAAA;;AAgBAjB,KAAK,0CAAL;AAAA,gCAAiD,WAAMa,CAAN,EAAW;AAC1D,QAAIE,OAAO;AACTC,cAAQ,CACNb,eAAe,UAAf,EAA2B,IAA3B,CADM;AADC,KAAX;;AAMA,QAAIK,QAAQN,iBAAiBa,IAAjB,CAAZ;;AAEAF,MAAEC,KAAF,CAAQN,MAAMJ,OAAd,EAAuB,UAAvB,EAAmC,0BAAnC;AACAS,MAAEK,KAAF,CAAQV,MAAMQ,MAAd,EAAsB,yBAAtB;AACD,GAXD;;AAAA;AAAA;AAAA;AAAA;;AAaAhB,KAAK,+CAAL;AAAA,gCAAsD,WAAMa,CAAN,EAAW;AAC/D,QAAIE,OAAO,CACT,EAAEI,KAAK,MAAP,EADS,EAET;AACEH,cAAQ,CACNb,eAAe,WAAf,EAA4B,IAA5B,CADM,EAENA,eAAe,WAAf,EAA4B,IAA5B,CAFM;AADV,KAFS,EAQT,EAAEgB,KAAK,MAAP,EARS,EAST;AACEH,cAAQ,CACNb,eAAe,WAAf,EAA4B,IAA5B,CADM;AADV,KATS,CAAX;;AAgBA,QAAIK,QAAQN,iBAAiBa,IAAjB,CAAZ;;AAEAF,MAAEC,KAAF,CAAQN,MAAMJ,OAAd,EAAuB,WAAvB,EAAoC,0BAApC;AACAS,MAAEC,KAAF,CAAQN,MAAMH,IAAd,EAAoB,IAApB,EAA0B,uBAA1B;AACAQ,MAAEC,KAAF,CAAQN,MAAMC,QAAd,EAAwB,sBAAxB,EAAgD,2BAAhD;AACAI,MAAEC,KAAF,CAAQN,MAAMQ,MAAN,CAAaC,MAArB,EAA6B,CAA7B,EAAgC,yBAAhC;AACD,GAvBD;;AAAA;AAAA;AAAA;AAAA","file":"getResponseError.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst getResponseError = require('../getResponseError')\n\nconst createFooError = (message, code) => ({\n  meta: {\n    type: 'entity'\n  },\n  code,\n  error: message,\n  moreInfo: 'https://path/to/info',\n  parameter: 'foo',\n  column: 10,\n  line: 1\n})\n\ntest('getResponseError (empty response)', async t => {\n  t.equal(getResponseError(), null, 'should to be null')\n  t.equal(getResponseError({}), null, 'should to be null')\n  t.equal(getResponseError([{}]), null, 'should to be null')\n})\n\ntest('getResponseError (multi error response)', async t => {\n  let resp = {\n    errors: [\n      createFooError('Ошибка 1', 1000),\n      createFooError('Ошибка 2', 2000)\n    ]\n  }\n\n  let error = getResponseError(resp)\n\n  t.equal(error.message, 'Ошибка 1', 'should set error message')\n  t.equal(error.code, 1000, 'should set error code')\n  t.equal(error.moreInfo, 'https://path/to/info', 'should set error moreInfo')\n  t.equal(error.errors.length, 2, 'should set errors array')\n})\n\ntest('getResponseError (single error response)', async t => {\n  let resp = {\n    errors: [\n      createFooError('Ошибка 1', 1000)\n    ]\n  }\n\n  let error = getResponseError(resp)\n\n  t.equal(error.message, 'Ошибка 1', 'should set error message')\n  t.notOk(error.errors, 'should set errors array')\n})\n\ntest('getResponseError (multi error batch response)', async t => {\n  let resp = [\n    { foo: 'bar1' },\n    {\n      errors: [\n        createFooError('Ошибка 11', 1100),\n        createFooError('Ошибка 12', 1200)\n      ]\n    },\n    { foo: 'bar2' },\n    {\n      errors: [\n        createFooError('Ошибка 21', 2100)\n      ]\n    }\n  ]\n\n  let error = getResponseError(resp)\n\n  t.equal(error.message, 'Ошибка 11', 'should set error message')\n  t.equal(error.code, 1100, 'should set error code')\n  t.equal(error.moreInfo, 'https://path/to/info', 'should set error moreInfo')\n  t.equal(error.errors.length, 2, 'should set errors array')\n})\n"]}
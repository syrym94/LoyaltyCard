{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["test","require","Moysklad","t","ok","end","equals","getTimeString","ms","getOptions","getAuthHeader","fetchUrl","buildUrl","parseUrl","GET","POST","PUT","DELETE","options","login","password","msOptions","true","counterparties","limit","rows","Array","Promise","all","context","employee","meta","href","group","code","Date","now","product","name","attributes","id","value","newProduct","shouldFail"],"mappings":"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","file":"index.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst Moysklad = require('..')\n\ntest('Moysklad constructor', t => {\n  t.ok(Moysklad)\n  t.end()\n})\n\ntest('Moysklad static methods', t => {\n  t.equals(typeof Moysklad.getTimeString, 'function')\n  t.end()\n})\n\ntest('Moysklad instance methods', t => {\n  let ms = Moysklad()\n  t.ok(ms)\n  t.equals(typeof ms.getOptions, 'function')\n  t.equals(typeof ms.getAuthHeader, 'function')\n  t.equals(typeof ms.fetchUrl, 'function')\n  t.equals(typeof ms.buildUrl, 'function')\n  t.equals(typeof ms.parseUrl, 'function')\n  t.equals(typeof ms.GET, 'function')\n  t.equals(typeof ms.POST, 'function')\n  t.equals(typeof ms.PUT, 'function')\n  t.equals(typeof ms.DELETE, 'function')\n  t.end()\n})\n\ntest('Create Moysklad instance with options', t => {\n  let options = {\n    login: 'login',\n    password: 'password'\n  }\n\n  let ms = Moysklad(options)\n  t.ok(ms)\n\n  let msOptions = ms.getOptions()\n  t.true(msOptions !== options)\n  t.equals(msOptions.login, 'login')\n  t.equals(msOptions.password, 'password')\n\n  t.end()\n})\n\ntest('Moysklad#GET method', async t => {\n  let ms = Moysklad()\n\n  let counterparties = await ms.GET('entity/counterparty', { limit: 1 })\n  t.equals(typeof counterparties, 'object', 'should return object')\n  t.ok(counterparties.rows instanceof Array, 'should return counterparties collection')\n\n  let [employee, group] = await Promise.all([\n    ms.fetchUrl(counterparties.context.employee.meta.href),\n    ms.fetchUrl(counterparties.rows[0].group.meta.href)\n  ])\n\n  t.equals(typeof employee, 'object',\n    'Moysklad#fetchUrl method should fetch employee object by href')\n\n  t.equals(typeof group, 'object',\n    'Moysklad#fetchUrl method should fetch group object by href')\n})\n\ntest('Moysklad#POST/PUT/DELETE', async t => {\n  let ms = Moysklad()\n\n  let code = 'test-' + Date.now()\n  let product = {\n    name: 'TEST-' + Date.now(),\n    code,\n    attributes: [\n      {\n        id: '0008b3f4-1897-11e3-d76c-7054d21a8d1e',\n        name: 'Вид товара',\n        value: {\n          name: 'Рюкзак'\n        }\n      },\n      {\n        id: 'f4c073c5-1bcc-4d91-8b41-ed825495b677',\n        name: 'Бренд',\n        value: {\n          name: 'No Brand'\n        }\n      },\n      {\n        id: '71f17086-1a7f-47f1-b447-59b71351bfad',\n        name: 'Сезон',\n        value: {\n          name: '02 Осень/Зима'\n        }\n      },\n      {\n        id: 'b4bee095-4278-4147-95e0-0328c9207be0',\n        name: 'Вид номенклатуры',\n        value: {\n          name: 'Товары в обороте'\n        }\n      }\n    ]\n  }\n\n  let newProduct = await ms.POST('entity/product', product)\n\n  t.ok(newProduct, 'POST should create new entity')\n  t.equals(newProduct.name, product.name, 'new entity name should equals')\n  t.equals(newProduct.code, code, 'new entity name should have some property')\n\n  code = 'test-' + Date.now()\n  newProduct = await ms.PUT(['entity/product', newProduct.id], { code })\n\n  t.ok(newProduct, 'PUT should update entity')\n  t.equals(newProduct.code, code, 'updated entity field should be equal')\n\n  await ms.DELETE(['entity/product', newProduct.id])\n\n  await t.shouldFail((() => ms.GET(['entity/product', newProduct.id]))(), /не найден/i)\n})\n"]}
{"version":3,"sources":["../../src/tools/parseQueryString.js"],"names":["extractQueryValue","str","asBool","Boolean","toString","asNum","parseInt","decodeURIComponent","extractQueryValues","indexOf","split","map","v","module","exports","parseQueryString","queryString","trim","kvMap","reduce","res","queryPart","kv","key","value","resValue","get","set","concat","Map","result","entry","entries","length"],"mappings":"AAAA;;;;AAEA,SAASA,iBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIA,QAAQ,EAAZ,EAAgB;AAAE,WAAO,IAAP;AAAa;AAC/B,MAAIC,SAASC,QAAQF,GAAR,CAAb;AACA,MAAIC,OAAOE,QAAP,OAAsBH,GAA1B,EAA+B;AAC7B,WAAOC,MAAP;AACD;;AAED,MAAIG,QAAQC,SAASL,GAAT,CAAZ;AACA,MAAII,MAAMD,QAAN,OAAqBH,GAAzB,EAA8B;AAC5B,WAAOI,KAAP;AACD;;AAED,SAAOE,mBAAmBN,GAAnB,CAAP;AACD;;AAED,SAASO,kBAAT,CAA6BP,GAA7B,EAAkC;AAChC,SAAOA,IAAIQ,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GACHR,IAAIS,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBC,KAAKZ,kBAAkBY,CAAlB,CAAxB,CADG,GAEH,CAACZ,kBAAkBC,GAAlB,CAAD,CAFJ;AAGD;;AAEDY,OAAOC,OAAP,GAAiB,SAASC,gBAAT,CAA2BC,WAA3B,EAAwC;AACvD,MAAIA,eAAe,IAAf,IAAuBA,gBAAgB,EAA3C,EAA+C;AAAE,WAAO,KAAK,CAAZ;AAAe;AAChEA,gBAAcA,YAAYC,IAAZ,EAAd;AACA,MAAI,CAACD,WAAL,EAAkB;AAAE,WAAO,KAAK,CAAZ;AAAe;;AAEnC,MAAIE,QAAQF,YAAYN,KAAZ,CAAkB,GAAlB,EAAuBS,MAAvB,CAA8B,CAACC,GAAD,EAAMC,SAAN,KAAoB;AAC5D,QAAIC,KAAKD,UAAUX,KAAV,CAAgB,GAAhB,CAAT;AACA,QAAIa,MAAMD,GAAG,CAAH,CAAV;AACA,QAAIE,QAAQhB,mBAAmBc,GAAG,CAAH,CAAnB,CAAZ;AACA,QAAIG,WAAWL,IAAIM,GAAJ,CAAQH,GAAR,CAAf;AACA,WAAOH,IAAIO,GAAJ,CAAQJ,GAAR,EAAaE,WAAWA,SAASG,MAAT,CAAgBJ,KAAhB,CAAX,GAAoCA,KAAjD,CAAP;AACD,GANW,EAMT,IAAIK,GAAJ,EANS,CAAZ;;AAQA,MAAIC,SAAS,EAAb;AACA,OAAK,IAAIC,KAAT,IAAkBb,MAAMc,OAAN,EAAlB,EAAmC;AAAA,gCACdD,KADc;;AAAA,QAC5BR,GAD4B;AAAA,QACvBC,KADuB;;AAEjCM,WAAOP,GAAP,IAAcC,MAAMS,MAAN,GAAe,CAAf,GAAmBT,KAAnB,GAA2BA,MAAM,CAAN,CAAzC;AACD;;AAED,SAAOM,MAAP;AACD,CApBD","file":"parseQueryString.js","sourcesContent":["'use strict'\n\nfunction extractQueryValue (str) {\n  if (str === '') { return null }\n  let asBool = Boolean(str)\n  if (asBool.toString() === str) {\n    return asBool\n  }\n\n  let asNum = parseInt(str)\n  if (asNum.toString() === str) {\n    return asNum\n  }\n\n  return decodeURIComponent(str)\n}\n\nfunction extractQueryValues (str) {\n  return str.indexOf(',') !== -1\n    ? str.split(',').map(v => extractQueryValue(v))\n    : [extractQueryValue(str)]\n}\n\nmodule.exports = function parseQueryString (queryString) {\n  if (queryString == null || queryString === '') { return void 0 }\n  queryString = queryString.trim()\n  if (!queryString) { return void 0 }\n\n  let kvMap = queryString.split('&').reduce((res, queryPart) => {\n    let kv = queryPart.split('=')\n    let key = kv[0]\n    let value = extractQueryValues(kv[1])\n    let resValue = res.get(key)\n    return res.set(key, resValue ? resValue.concat(value) : value)\n  }, new Map())\n\n  let result = {}\n  for (let entry of kvMap.entries()) {\n    let [key, value] = entry\n    result[key] = value.length > 1 ? value : value[0]\n  }\n\n  return result\n}\n"]}
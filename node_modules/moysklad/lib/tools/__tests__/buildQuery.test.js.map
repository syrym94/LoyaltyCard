{"version":3,"sources":["../../../src/tools/__tests__/buildQuery.test.js"],"names":["test","require","buildQuery","t","ok","equals","query","str","num","bool","nil","nothing","undefined","arr","throws","foo","Function","filter","bar","end"],"mappings":"AAAA;;AAEA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,eAAR,CAAnB;;AAEAD,KAAK,YAAL,EAAmBG,KAAK;AACtBA,IAAEC,EAAF,CAAKF,UAAL;AACAC,IAAEE,MAAF,CAAS,OAAOH,UAAhB,EAA4B,UAA5B,EAAwC,uBAAxC;;AAEA,MAAII,KAAJ;;AAEA;AACAA,UAAQ;AACNC,SAAK,aADC;AAENC,SAAK,CAFC;AAGNC,UAAM,IAHA;AAINC,SAAK,IAJC;AAKNC,aAASC,SALH;AAMNC,SAAK,CAAC,KAAD,EAAQ,CAAR,EAAW,IAAX,EAAiB,IAAjB,EAAuBD,SAAvB;AANC,GAAR;;AASAT,IAAEE,MAAF,CACEH,WAAWI,KAAX,CADF,EAEE,oEAFF,EAGE,oBAHF;;AAKAH,IAAEW,MAAF,CACE,MAAMZ,WAAW,EAAEa,KAAK,EAAP,EAAX,CADR,EAEE,2EAFF,EAGE,gFAHF;;AAKAZ,IAAEW,MAAF,CACE,MAAMZ,WAAW,EAAEW,KAAK,CAAC,CAAD,EAAI,KAAJ,EAAWG,QAAX,CAAP,EAAX,CADR,EAEE,2EAFF,EAGE,gFAHF;;AAKA;AACAV,UAAQ;AACNW,YAAQ;AACNF,WAAK,YADC;AAENG,WAAK,CAAC,MAAD,EAAS,MAAT;AAFC;AADF,GAAR;AAMAf,IAAEE,MAAF,CACEH,WAAWI,KAAX,CADF,EAEE,qDAFF,EAGE,gDAHF;;AAMA;AACAA,UAAQ;AACNW,YAAQ;AADF,GAAR;;AAIAd,IAAEE,MAAF,CACEH,WAAWI,KAAX,CADF,EAEE,wBAFF,EAGE,0CAHF;;AAKAH,IAAEW,MAAF,CACE,MAAMZ,WAAW,EAAEe,QAAQ,CAAC,KAAD,EAAQ,KAAR,CAAV,EAAX,CADR,EAEE,oCAFF,EAGE,sDAHF;;AAKAd,IAAEgB,GAAF;AACD,CA5DD","file":"buildQuery.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst buildQuery = require('../buildQuery')\n\ntest('buildQuery', t => {\n  t.ok(buildQuery)\n  t.equals(typeof buildQuery, 'function', 'should to be function')\n\n  let query\n\n  // Преобразует поля объекта в строку запроса\n  query = {\n    str: 'some string',\n    num: 1,\n    bool: true,\n    nil: null,\n    nothing: undefined,\n    arr: ['str', 1, true, null, undefined]\n  }\n\n  t.equals(\n    buildQuery(query),\n    'str=some%20string&num=1&bool=true&nil=&arr=str&arr=1&arr=true&arr=',\n    'should build query')\n\n  t.throws(\n    () => buildQuery({ foo: {} }),\n    /url query key value must to be string, number, boolean, null or undefined/,\n    'should throw if query key value not string, number, boolean, null or undefined')\n\n  t.throws(\n    () => buildQuery({ arr: [1, 'str', Function] }),\n    /url query key value must to be string, number, boolean, null or undefined/,\n    'should throw if query key value not string, number, boolean, null or undefined')\n\n  // Преобразует поле filter\n  query = {\n    filter: {\n      foo: 'foo string',\n      bar: ['baz1', 'baz2']\n    }\n  }\n  t.equals(\n    buildQuery(query),\n    'filter=bar%3Dbaz1%3Bbar%3Dbaz2%3Bfoo%3Dfoo%20string',\n    'should transform query.filter object to string'\n  )\n\n  // Не преобразует поле фильтр, если указана строка\n  query = {\n    filter: 'foo=bar baz'\n  }\n\n  t.equals(\n    buildQuery(query),\n    'filter=foo%3Dbar%20baz',\n    'should not transform query.filter string')\n\n  t.throws(\n    () => buildQuery({ filter: ['foo', 'bar'] }),\n    /filter must to be string or object/,\n    'should throw if query.filter is not string or object')\n\n  t.end()\n})\n"]}
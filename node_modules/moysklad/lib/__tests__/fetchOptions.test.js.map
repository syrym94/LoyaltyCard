{"version":3,"sources":["../../src/__tests__/fetchOptions.test.js"],"names":["test","require","nodeFetch","Moysklad","t","ms","fetch","GET","muteErrors","then","res","ok","errors","Array","limit","rawResponse","code","status","equal","json","meta","rows","length","plan","catch","err","Error","message","moreInfo","body","template","href","type","mediaType","extension","POST","headers","get","parseTimeString","millisecond","updated","getMilliseconds"],"mappings":"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","file":"fetchOptions.test.js","sourcesContent":["'use strict'\n\nconst test = require('blue-tape')\nconst nodeFetch = require('node-fetch')\nconst Moysklad = require('..')\n\ntest('Response with muteErrors option', t => {\n  const ms = Moysklad({\n    fetch: nodeFetch\n  })\n\n  return ms.GET('entity/demand2', null, { muteErrors: true })\n    .then(async res => {\n      t.ok(res.errors instanceof Array, 'should return raw error object')\n    })\n})\n\ntest('Response with rawResponse option', t => {\n  const ms = Moysklad({\n    fetch: nodeFetch\n  })\n\n  return ms.GET('entity/demand', { limit: 2 }, { rawResponse: true })\n    .then(async res => {\n      let { status: code } = res\n      t.equal(code, 200, 'should return code 200')\n\n      let json = await res.json()\n      t.ok(json.meta, 'should return entity')\n      t.equal(json.rows.length, 2, 'should return 2 rows in collection')\n    })\n})\n\ntest('Response with rawResponse option (with error)', t => {\n  t.plan(4)\n\n  const ms = Moysklad({\n    fetch: nodeFetch\n  })\n\n  ms.GET('entity/demand2', null, { rawResponse: true })\n    .catch(err => {\n      t.ok(err instanceof Error, 'should throw error')\n      t.equal(err.message, 'Неизвестный тип: \\'demand2\\'', 'should parse error message')\n      t.equal(err.code, 1005, 'should parse error code')\n      t.equal(err.moreInfo, 'https://online.moysklad.ru/api/remap/1.1/doc#обработка-ошибок-1005',\n        'should parse error moreInfo')\n    })\n})\n\ntest('Response with rawResponse and muteErrors options', async t => {\n  const ms = Moysklad({\n    fetch: nodeFetch\n  })\n\n  let body = {\n    template: {\n      meta: {\n        href: 'https://online.moysklad.ru/api/remap/1.1/entity/demand/metadata/customtemplate/' +\n          '8a686b8a-9e4a-11e5-7a69-97110004af3e',\n        type: 'customtemplate',\n        mediaType: 'application/json'\n      }\n    },\n    extension: 'pdf'\n  }\n\n  let { headers, status: code } = await ms\n    .POST('entity/demand/773e16c5-ef53-11e6-7a69-9711001669c5/export/', body, null, {\n      rawResponse: true,\n      muteErrors: true\n    })\n\n  t.equal(code, 303, 'response.status should to be 303')\n\n  t.ok(headers.get, 'headers should have get method')\n  t.ok(/vensi_tov_check-NA-dmd-09995.pdf/.test(headers.get('location')),\n    'headers Location header should contain url to from')\n})\n\ntest('Response with millisecond option', t => {\n  const ms = Moysklad({\n    fetch: nodeFetch\n  })\n\n  const { parseTimeString } = Moysklad\n\n  return ms.GET('entity/product/0010fe40-307d-11e5-7a07-673d0013045f',\n    { limit: 1 }, { millisecond: true })\n    .then(async res => {\n      t.equal(parseTimeString(res.updated).getMilliseconds(), 216)\n    })\n})\n"]}
{"version":3,"sources":["../../src/methods/buildUrl.js"],"names":["have","require","buildQuery","normalizeUrl","module","exports","buildUrl","args","strict","url","query","path","argumentsObject","parsedUrl","parseUrl","getOptions","endpoint","api","apiVersion","resultUrl","concat","join","queryString"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,SAAR,CAAb;AACA,MAAMC,aAAaD,QAAQ,qBAAR,CAAnB;AACA,MAAME,eAAeF,QAAQ,uBAAR,CAArB;;AAEAG,OAAOC,OAAP,GAAiB,SAASC,QAAT,GAA4B;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAAA,qBAChBP,KAAKQ,MAAL,CAAYD,IAAZ,EAAkB,CAC3C,EAAEE,KAAK,KAAP,EAAcC,OAAO,YAArB,EAD2C,EAE3C,EAAEC,MAAM,gBAAR,EAA0BD,OAAO,YAAjC,EAF2C,EAG3CV,KAAKY,eAHsC,CAAlB,CADgB;;AAAA,MACrCH,GADqC,gBACrCA,GADqC;AAAA,MAChCE,IADgC,gBAChCA,IADgC;AAAA,MAC1BD,KAD0B,gBAC1BA,KAD0B;;;AAO3C,MAAID,GAAJ,EAAS;AACP,QAAII,YAAY,KAAKC,QAAL,CAAcL,GAAd,CAAhB;AACAE,WAAOE,UAAUF,IAAjB;AACAD,yBACKG,UAAUH,KADf,EAEKA,KAFL;AAID;;AAd0C,oBAgBP,KAAKK,UAAL,EAhBO;;AAAA,MAgBrCC,QAhBqC,eAgBrCA,QAhBqC;AAAA,MAgB3BC,GAhB2B,eAgB3BA,GAhB2B;AAAA,MAgBtBC,UAhBsB,eAgBtBA,UAhBsB;;;AAkB3C,MAAIC,YAAYhB,aAAa,CAACa,QAAD,EAAWC,GAAX,EAAgBC,UAAhB,EAA4BE,MAA5B,CAAmCT,IAAnC,EAAyCU,IAAzC,CAA8C,GAA9C,CAAb,CAAhB;;AAEA,MAAIX,KAAJ,EAAW;AACT,QAAIY,cAAcpB,WAAWQ,KAAX,CAAlB;AACAS,gBAAYA,aAAaG,cAAe,IAAGA,WAAY,EAA9B,GAAkC,EAA/C,CAAZ;AACD;;AAED,SAAOH,SAAP;AACD,CA1BD","file":"buildUrl.js","sourcesContent":["'use strict'\n\nconst have = require('../have')\nconst buildQuery = require('../tools/buildQuery')\nconst normalizeUrl = require('../tools/normalizeUrl')\n\nmodule.exports = function buildUrl (...args) {\n  let { url, path, query } = have.strict(args, [\n    { url: 'url', query: 'opt Object' },\n    { path: 'str or str arr', query: 'opt Object' },\n    have.argumentsObject\n  ])\n\n  if (url) {\n    let parsedUrl = this.parseUrl(url)\n    path = parsedUrl.path\n    query = {\n      ...parsedUrl.query,\n      ...query\n    }\n  }\n\n  let { endpoint, api, apiVersion } = this.getOptions()\n\n  let resultUrl = normalizeUrl([endpoint, api, apiVersion].concat(path).join('/'))\n\n  if (query) {\n    let queryString = buildQuery(query)\n    resultUrl = resultUrl + (queryString ? `?${queryString}` : '')\n  }\n\n  return resultUrl\n}\n"]}